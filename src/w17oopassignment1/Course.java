package w17oopassignment1;

import java.time.DayOfWeek;
import java.time.LocalTime;
import java.util.ArrayList;

/**
 * Created by Mykyta on 3/04/17.
 */
public class Course {

    private String courseCode, courseName, description, room;
    private DayOfWeek dayOfClass;
    private LocalTime startTime;
    private int maxNumberOfStudents, duration;
    private Instructor prof;
    private ArrayList<Student> listOfStudents;

    public Course(String courseCode, String courseName, String description, String room, Instructor prof, DayOfWeek dayOfClass, LocalTime startTime, int duration, int maxNumberOfStudents) {
        this.courseCode = courseCode;
        this.courseName = courseName;
        this.description = description;
        this.room = room;
        setDayOfClass(dayOfClass);
        setStartTime(startTime);
        setMaxNumberOfStudents(maxNumberOfStudents);
        this.duration = duration;
        setProf(prof);

        listOfStudents = new ArrayList<>();
    }

    /**
     * Tests to see if the student in question is in good standing and if there is enough space in class.
     * When this is true it adds the student to the course. Throws an exception if it is not.
     * @param student
     * @throws InvalidStudentException a custom error message indicates that the student parameter wasnt valid
     */
    public void addStudent(Student student) throws InvalidStudentException {
        if(student.isInGoodStanding() && listOfStudents.size() < maxNumberOfStudents){
            listOfStudents.add(student);
        } else {
            throw new InvalidStudentException("Bad student");
        }
    }

    /**
     * Finds out the average time students of this course would spend in college.
     * @return
     */
    public double averageStudentTimeAtCollege(){
        double yearsAtCollegeTotal = 0;

        for(Student student : listOfStudents){
            yearsAtCollegeTotal += student.getYearsAtCollege();
        }
        double avgYearsAtCollege = yearsAtCollegeTotal / listOfStudents.size();
        if(Double.isNaN(avgYearsAtCollege))
            return 0;
        else
            return yearsAtCollegeTotal / listOfStudents.size();
    }

    /**
     * Validates if the start time of the class is in between 8AM and 6PM. Sets the start date if the time is valid.
     * @param time
     */
    public void setStartTime(LocalTime time){
        if(time.isAfter(LocalTime.of(7, 59)) && time.isBefore(LocalTime.of(18, 1))){
            this.startTime = time;
        } else {
            throw new IllegalArgumentException("Class can be no earlier than 8AM and no later than 6PM");
        }
    }

    /**
     * Checks if the day of the course is during the working week. Throws an exception if it is on the weekend.
     * @param day
     */
    public void setDayOfClass(DayOfWeek day){
        if(day.getValue() != 6 && day.getValue() != 7){
            this.dayOfClass = day;
        } else {
            throw new IllegalArgumentException("Class can not be scheduled for Saturday or Sunday");
        }
    }

    /**
     * Displays all students enrolled in the course. Looping over the student`s toString() method.
     * @return
     */
    public String showClassList(){
        String classList = "";
        for(Student student:listOfStudents){
            classList += student.toString() + "%n";
        }
        return String.format(classList);
    }

    /**
     * Returns the number of students in the course.
     * @return
     */
    public int getNumberOfStudentsEnrolled(){
        return listOfStudents.size();
    }

    /**
     * Checks if the entered number is in 10-50 range and sets the instance variable.
     * @param maxNumberOfStudents
     */
    public void setMaxNumberOfStudents(int maxNumberOfStudents){
        if(maxNumberOfStudents >= 10 && maxNumberOfStudents <= 50){
            this.maxNumberOfStudents = maxNumberOfStudents;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /**
     * Checks if the instructor is qualified to teach this course, and if yes, assigns them to the course.
     * @param prof
     */
    public void setProf(Instructor prof){
        if(prof.canTeach(courseCode)){
            this.prof = prof;
        } else {
            throw new IllegalArgumentException("Instructor is not qualified to teach this course");
        }
    }

    /**
     * Gets the list of students.
     * @return
     */
    public ArrayList<Student> getStudents(){
        return listOfStudents;
    }

    /**
     * toString() override. Represents the course as: <Course name> <Course number>.
     * @return
     */
    @Override
    public String toString(){
        return courseName + " " + courseCode;
    }

    /**
     * Getters / Setters (Yay for autogenerated stuff)
     */
    public DayOfWeek getDayOfClass(){
        return dayOfClass;
    }

    public int getDuration(){
        return duration;
    }

    public String getDescription(){
        return description;
    }

    public Instructor getProf(){
        return prof;
    }

    public int getMaxNumberOfStudents(){
        return maxNumberOfStudents;
    }

    public String getCourseCode() {
        return courseCode;
    }

    public void setCourseCode(String courseCode) {
        this.courseCode = courseCode;
    }

    public String getCourseName() {
        return courseName;
    }

    public void setCourseName(String courseName) {
        this.courseName = courseName;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getRoom() {
        return room;
    }

    public void setRoom(String room) {
        this.room = room;
    }

    public LocalTime getStartTime() {
        return startTime;
    }

    public void setDuration(int duration) {
        this.duration = duration;
    }

    public ArrayList<Student> getListOfStudents() {
        return listOfStudents;
    }

    public void setListOfStudents(ArrayList<Student> listOfStudents) {
        this.listOfStudents = listOfStudents;
    }
}
